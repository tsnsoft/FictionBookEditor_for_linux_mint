<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/html4/loose.dtd">
<html>
<title>заголовок</title>
<meta http-equiv="X-UA-Compatible" content="IE=6">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<link rel="stylesheet" href="css/tree.css" type="text/css"></link>
<link rel="stylesheet" href="css/context-menu.css" type="text/css"></link>
<style type="text/css">
 body {margin:0; padding:0; height:100%; width:100%;}
 #empty_div {float:left; overflow:hidden; width:620px; padding: 0px; margin: 0px;}
 #vscrollbar {width:14px; float:right; height:100%; padding:0; margin:0; display:none; overflow:hidden;}
</style>
<script src="context-menu.js"></script>
<script language=JavaScript type="text/javascript">
/************************************************************************************************************
Drag and drop folder tree
Copyright (C) 2006  DTHMLGoodies.com, Alf Magne Kalleland

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

Dhtmlgoodies.com., hereby disclaims all copyright interest in this script
written by Alf Magne Kalleland.

Alf Magne Kalleland, 2006
Owner of DHTMLgoodies.com


************************************************************************************************************/
 var JSTreeObj;
 var treeUlCounter=0;
 var nodeId=1;
 var howToScroll=0;
 
 //шаг, на который происходит скроллинг при одном вызове скроллирующей функции
 var scrollStep=30;

 //промежуток в миллисекундах между вызовами скроллирующей функции
 var scrollingInterval=100;

 //размер границ сверху и снизу фрейма с деревом, при наведении на которые
 //происходит скроллинг дерева
 var scrollIndent=20;

 var scrollFlag=false;
 var scrollButtonUpHeight=14;
 var scrollButtonDownHeight=14;
 var scrollBarWidth=14;
 var scrollStepInPixels=30;
 var myDateObject=new Date();
 var mouseX,mouseY,dragFromY,rememberedScrollPos,scrollbarTimer,scrollLineClickedY,myClientY;
 var sic=0;
 var firstSic=-1;
 var lastSic=-1;
 var SelectedItemsChain=new Object();
 var sii=0;
 var SelectedItemsIndex=new Object();
 var activeNode=null;
 var elementUnderEditing;
 var hrefInTitleRegExp=new RegExp("<a ([^>]+? )?href=(\"[^\"]*?(#[^\"]*?)\"|'[^']*?(#[^']*?)')(([^>]*?)*?)>","ig");
 var hrefInTitleRegExp_="<a $1href=\"$3$4\"$5>";
 var preloadPic = new Image();
 preloadPic.src="images/ScrollBlack.png";
 var a2=0;
 var menuModel,menuModelRenameOnly,menuModelDeleteOnly;

 function calculateAndPaintScrollbar() {
  //alert("calculateAndPaintScrollbar вход");
  if (document.body.clientHeight>=document.getElementById("empty_div").offsetHeight) {
   document.getElementById("empty_div").width=document.body.clientWidth+"px";
   document.getElementById("vscrollbar").style.display="none";
   document.getElementById("empty_div").style.width=document.body.clientWidth+"px";
   document.getElementById("empty_div").style.marginTop="0px";
   //alert("display none");
   return;
  }
  var scrollBarHeight=document.body.clientHeight-scrollButtonUpHeight-scrollButtonDownHeight;
  //alert("scrollBarHeight:"+scrollBarHeight);
  //alert("document.getElementById('empty_div').offsetHeight:"+document.getElementById("empty_div").offsetHeight);
  //alert("document.body.clientHeight:"+document.body.clientHeight);
  var runnerHeight=Math.round(document.body.clientHeight/document.getElementById("empty_div").offsetHeight*scrollBarHeight)-2-2;
  //   document.body.clientHeight-Math.round(((document.getElementById("empty_div").offsetHeight-document.body.clientHeight)/document.body.clientHeight)*(scrollBarHeight))-2-2;
  //alert("runnerHeight:"+runnerHeight);
  var emptyDivMarginTopInString=document.getElementById("empty_div").style.marginTop;
  var emptyDivMarginTopInNumber;
  //alert("emptyDivMarginTopInString:"+emptyDivMarginTopInString);
  if (emptyDivMarginTopInString!="") {
   var k=emptyDivMarginTopInString.lastIndexOf("px");
   if (k<0) return;
   //alert("emptyDivMarginTopInString.substr(0,k):"+emptyDivMarginTopInString.substr(0,k));
   emptyDivMarginTopInNumber=eval(emptyDivMarginTopInString.substr(0,k));
  } else emptyDivMarginTopInNumber=0;
  var myScrollPos=Math.round(-emptyDivMarginTopInNumber/document.getElementById("empty_div").offsetHeight*scrollBarHeight);
  //alert("document.body.clientHeight:"+document.body.clientHeight+"\n"+
  //      "document.getElementById('empty_div').offsetHeight:"+document.getElementById('empty_div').offsetHeight+"\n"+
  //      "scrollBarHeight:"+scrollBarHeight+"\n"+
  //      "runnerHeight:"+runnerHeight+"\n"+
  //      "emptyDivMarginTopInNumber:"+emptyDivMarginTopInNumber);
  document.getElementById("vscrollbar").style.display="block";
  paintScrollbar(myScrollPos,runnerHeight);
  //alert("document.getElementById(\"ScrollLineBottom\").style.height"+document.getElementById("ScrollLineBottom").style.height);
  //alert("document.body.clientWidth:"+document.body.clientWidth);
  //alert("document.body.clientWidth-scrollBarWidth:"+(document.body.clientWidth-scrollBarWidth));
  document.getElementById("empty_div").style.width=(document.body.clientWidth-scrollBarWidth)+"px";
  //alert("calculateAndPaintScrollbar выход");
 }

 function sclexScrollTo(toWhichPixelLineToScroll) {
  var emptyDivMarginTopInNumber=-toWhichPixelLineToScroll;
  if (emptyDivMarginTopInNumber>0) emptyDivMarginTopInNumber=0
  else if (document.body.clientHeight-emptyDivMarginTopInNumber>=document.getElementById("empty_div").offsetHeight)
   emptyDivMarginTopInNumber=-(document.getElementById("empty_div").offsetHeight-document.body.clientHeight);
  if (document.getElementById("vscrollbar").style.display!="none")
   document.getElementById("empty_div").style.marginTop=emptyDivMarginTopInNumber+"px";
  else
   document.getElementById("empty_div").style.marginTop="0px";
  calculateAndPaintScrollbar();
 }

 function sclexScrollBy(howManyPixelsToScroll) {
  var emptyDivMarginTopInString=document.getElementById("empty_div").style.marginTop;
  var emptyDivMarginTopInNumber;
  if (emptyDivMarginTopInString!="") {
   var k=emptyDivMarginTopInString.lastIndexOf("px");
   if (k<0) emptyDivMarginTopInNumber=0;
   else emptyDivMarginTopInNumber=eval(emptyDivMarginTopInString.substr(0,k));
  } else emptyDivMarginTopInNumber=0;
  //alert("emptyDivMarginTopInNumber:"+emptyDivMarginTopInNumber);
  emptyDivMarginTopInNumber+=howManyPixelsToScroll;
  if (emptyDivMarginTopInNumber>0) emptyDivMarginTopInNumber=0
  else if (document.body.clientHeight-emptyDivMarginTopInNumber>=document.getElementById("empty_div").offsetHeight)
   emptyDivMarginTopInNumber=-(document.getElementById("empty_div").offsetHeight-document.body.clientHeight);
  if (document.getElementById("vscrollbar").style.display!="none")
   document.getElementById("empty_div").style.marginTop=(emptyDivMarginTopInNumber)+"px";
  else
   document.getElementById("empty_div").style.marginTop="0px";
  calculateAndPaintScrollbar();
 }

        /* Constructor */
        function JSDragDropTree()
        {
                var idOfTree;
                var imageFolder;
                var folderImage;
                var plusImage;
                var minusImage;
                var maximumDepth;
                var dragNode_source;
                var dragNode_parent;
                var dragNode_sourceNextSib;
                var dragNode_noSiblings;
                var ajaxObjects;

                var dragNode_destination;
                var floatingContainer;
                var draggingNow=false;
                var dragDropTimer;
                var dropTargetIndicator;
                var insertAsSub;
                var indicator_offsetX;
                var indicator_offsetX_sub;
                var indicator_offsetY;
                var savedDropIndicator=null;
                this.imageFolder='images/';
                this.folderImage='paper.png';
                this.plusImage='plus.png';
                this.minusImage='minus.png';
                this.maximumDepth=6;
                var messageMaximumDepthReached="Достигнута максимальная глубина дерева. Больше нельзя.";
                var filePathRenameItem;
                var filePathDeleteItem;
                var additionalRenameRequestParameters={};
                var additionalDeleteRequestParameters={};

                var renameAllowed;
                var deleteAllowed;
                var currentlyActiveItem;
                var contextMenu;
                var currentItemToEdit;          // Reference to item currently being edited(example: renamed)
                var helpObj;

                this.contextMenu=false;
                this.floatingContainer=document.createElement('UL');
                this.floatingContainer.style.position='absolute';
                this.floatingContainer.style.display='none';
                this.floatingContainer.id='floatingContainer';
                this.insertAsSub=false;
                document.body.appendChild(this.floatingContainer);
                this.dragDropTimer=-1;
                this.dragNode_noSiblings=false;
                this.currentItemToEdit=false;

                if (document.all) {
                        this.indicator_offsetX=2;     // Offset position of small black lines indicating where nodes would be dropped.
                        this.indicator_offsetX_sub=4;
                        this.indicator_offsetY=2;
                } else {
                        this.indicator_offsetX=1;     // Offset position of small black lines indicating where nodes would be dropped.
                        this.indicator_offsetX_sub=3;
                        this.indicator_offsetY=2;
                }
                if (navigator.userAgent.indexOf('Opera')>=0) {
                        this.indicator_offsetX=2;     // Offset position of small black lines indicating where nodes would be dropped.
                        this.indicator_offsetX_sub=3;
                        this.indicator_offsetY=-7;
                }

                this.messageMaximumDepthReached=''; // Use '' if you don't want to display a message

                this.renameAllowed=true;
                this.deleteAllowed=true;
                this.currentlyActiveItem=false;
                this.filePathRenameItem='folderTree_updateItem.php';
                this.filePathDeleteItem='folderTree_updateItem.php';
                this.ajaxObjects=new Array();
                this.helpObj=false;

                this.RENAME_STATE_BEGIN=1;
                this.RENAME_STATE_CANCELED=2;
                this.RENAME_STATE_REQUEST_SENDED=3;
                this.renameState=null;
        }


        /* JSDragDropTree class */
        JSDragDropTree.prototype={
                // {{{ addEvent()
            /**
             *
             *  This function adds an event listener to an element on the page.
             *
             *  @param Object whichObject=Reference to HTML element(Which object to assigne the event)
             *  @param String eventType=Which type of event, example "mousemove" or "mouseup"
             *  @param functionName=Name of function to execute.
             *
             * @public
             */
                addEvent : function(whichObject,eventType,functionName)
                {
                  if (whichObject.attachEvent) {
                    whichObject['e'+eventType+functionName]=functionName;
                    whichObject[eventType+functionName]=function() {whichObject['e'+eventType+functionName]( window.event );}
                    whichObject.attachEvent( 'on'+eventType, whichObject[eventType+functionName] );
                  } else
                    whichObject.addEventListener(eventType,functionName,false);
                }
                // }}}
                ,
                // {{{ removeEvent()
            /**
             *
             *  This function removes an event listener from an element on the page.
             *
             *  @param Object whichObject=Reference to HTML element(Which object to assigne the event)
             *  @param String eventType=Which type of event, example "mousemove" or "mouseup"
             *  @param functionName=Name of function to execute.
             *
             * @public
             */
                removeEvent : function(whichObject,eventType,functionName)
                {
                  if (whichObject.detachEvent) {
                    whichObject.detachEvent('on'+eventType, whichObject[eventType+functionName]);
                    whichObject[eventType+functionName]=null;
                  } else
                    whichObject.removeEventListener(eventType,functionName,false);
                }
                ,
                Get_Cookie : function(name) {
                   var start=document.cookie.indexOf(name+"=");
                   var len=start+name.length+1;
                   if ((!start) && (name != document.cookie.substring(0,name.length))) return null;
                   if (start == -1) return null;
                   var end=document.cookie.indexOf(";",len);
                   if (end == -1) end=document.cookie.length;
                   return unescape(document.cookie.substring(len,end));
                }
                ,
                // This function has been slightly modified
                Set_Cookie : function(name,value,expires,path,domain,secure) {
                        expires=expires * 60*60*24*1000;
                        var today=new Date();
                        var expires_date=new Date( today.getTime() + (expires) );
                    var cookieString=name + "=" +escape(value) +
                       ( (expires) ? ";expires=" + expires_date.toGMTString() : "") +
                       ( (path) ? ";path=" + path : "") +
                       ( (domain) ? ";domain=" + domain : "") +
                       ( (secure) ? ";secure" : "");
                    document.cookie=cookieString;
                }
                ,
                setFileNameRename : function(newFileName)
                {
                        this.filePathRenameItem=newFileName;
                }
                ,
                setFileNameDelete : function(newFileName)
                {
                        this.filePathDeleteItem=newFileName;
                }
                ,
                setAdditionalRenameRequestParameters : function(requestParameters)
                {
                        this.additionalRenameRequestParameters=requestParameters;
                }
                ,
                setAdditionalDeleteRequestParameters : function(requestParameters)
                {
                        this.additionalDeleteRequestParameters=requestParameters;
                }
                ,setRenameAllowed : function(renameAllowed)
                {
                        this.renameAllowed=renameAllowed;
                }
                ,
                setDeleteAllowed : function(deleteAllowed)
                {
                        this.deleteAllowed=deleteAllowed;
                }
                ,setMaximumDepth : function(maxDepth)
                {
                        this.maximumDepth=maxDepth;
                }
                ,setMessageMaximumDepthReached : function(newMessage)
                {
                        this.messageMaximumDepthReached=newMessage;
                }
                ,
                setImageFolder : function(path)
                {
                        this.imageFolder=path;
                }
                ,
                setFolderImage : function(imagePath)
                {
                        this.folderImage=imagePath;
                }
                ,
                setPlusImage : function(imagePath)
                {
                        this.plusImage=imagePath;
                }
                ,
                setMinusImage : function(imagePath)
                {
                        this.minusImage=imagePath;
                }
                ,
                setTreeId : function(idOfTree) {
                 this.idOfTree=idOfTree;
                }
                ,
                expandAll : function() {
                 var menuItems=document.getElementById(this.idOfTree).getElementsByTagName('LI');
                 for(var no=menuItems.length-1;no>=0;no--) {
                  var subItems=menuItems[no].getElementsByTagName('UL');
                  if (subItems.length>0 && subItems[0].style.display!='block' && subItems[0].style.display!='') {
                   JSTreeObj.showHideNode(false,menuItems[no].id);
                  }
                 }
                }
                ,
                collapseAll : function() {
                 var menuItems=document.getElementById(this.idOfTree).getElementsByTagName('LI');
                 for(var no=menuItems.length-1;no>=0;no--) {
                  var subItems=menuItems[no].getElementsByTagName('UL');
                  if (subItems.length>0 && (subItems[0].style.display=='block' || subItems[0].style.display=='')) {
                   JSTreeObj.showHideNode(false,menuItems[no].id);
                  }
                 }
                }
                ,
                /*
                Find top pos of a tree node
                */
                getTopPos : function(obj) {
                        var top=obj.offsetTop/1;
                        while((obj=obj.offsetParent) != null) {
                                if (obj.tagName!='HTML')top += obj.offsetTop;
                        }
                        if (document.all)top=top/1 + 13; else top=top/1 + 4;
                        return top;
                }
                ,
                /*
                Find left pos of a tree node
                */
                getLeftPos : function(obj) {
                        var left=obj.offsetLeft/1 + 1;
                        while((obj=obj.offsetParent) != null) {
                                if (obj.tagName!='HTML')left += obj.offsetLeft;
                        }

                        if (document.all)left=left/1 - 2;
                        return left;
                }
                ,
                showHideNode : function(e,inputId) {
                        if (event) event.cancelBubble=true;
                        if (inputId) {
                                if (!document.getElementById(inputId))return;
                                thisNode=document.getElementById(inputId).getElementsByTagName('IMG')[0];
                        } else {
                                thisNode=this;
                                //if (this.tagName=='A')thisNode=this.parentNode.getElementsByTagName('IMG')[0];
                        }
                        if (thisNode.style.visibility=='hidden')return;
                        var parentNode=thisNode.parentNode;
                        inputId=parentNode.id.replace(/[^0-9]/g,'');
                        if (thisNode.src.indexOf(JSTreeObj.plusImage)>=0) {
                                thisNode.src=thisNode.src.replace(JSTreeObj.plusImage,JSTreeObj.minusImage);
                                var ul=thisNode;
                                while (ul.parentNode.nodeName!="LI") ul=ul.parentNode;
                                while (ul.nodeName!="UL") ul=ul.nextSibling;
                                //var ul=parentNode.getElementsByTagName('UL')[0];
                                ul.style.display='block';
                        } else {
                                thisNode.src=thisNode.src.replace(JSTreeObj.minusImage,JSTreeObj.plusImage);
                                var ul=thisNode;
                                while (ul.parentNode.nodeName!="LI") ul=ul.parentNode;
                                while (ul.nodeName!="UL") ul=ul.nextSibling;
                                ul.style.display='none';
                        }
                        calculateAndPaintScrollbar();
                        return false;
                }
                ,
                /* Initialize drag */
                initDrag : function(e) {
                 howToScroll=0;
                 if (document.all)e=event;
                 mouseX=e.clientX;
                 mouseY=e.clientY;
                 //alert("e.srcElement.outerHTML:\n"+e.srcElement.outerHTML);
                 var subs=JSTreeObj.floatingContainer.getElementsByTagName('LI');
                 if (subs.length>0) {
                  if (JSTreeObj.dragNode_sourceNextSib) {
                   JSTreeObj.dragNode_parent.insertBefore(JSTreeObj.dragNode_source,JSTreeObj.dragNode_sourceNextSib);
                  } else {
                   JSTreeObj.dragNode_parent.appendChild(JSTreeObj.dragNode_source);
                  }
                 }
                 var sclexNode=this;
                 while (sclexNode.parentNode.nodeName!="LI") sclexNode=sclexNode.parentNode;
                 sclexNode=sclexNode.parentNode;
                 JSTreeObj.dragNode_source=sclexNode;
                 JSTreeObj.dragNode_parent=sclexNode.parentNode;
                 JSTreeObj.dragNode_sourceNextSib=false;
                 if (JSTreeObj.dragNode_source.nextSibling) JSTreeObj.dragNode_sourceNextSib=JSTreeObj.dragNode_source.nextSibling;
                 JSTreeObj.dragNode_destination=false;
                 JSTreeObj.dragDropTimer=0;
                 draggingNow=true;
                 JSTreeObj.timerDrag();
                 {
                  if (/*activeNode*/true) {
                   if (event.ctrlKey==false) {
                    if (!activeNode) activeNode=sclexNode;
                    var tg=firstSic;
                    var tg2;
                    while (tg!=-1) {
                     tg2=SelectedItemsChain[tg+"_next"];
                     SelectedItemsIndex[SelectedItemsChain[tg]]=undefined;
                     SelectedItemsChain[tg+"_next"]=undefined;
                     SelectedItemsChain[tg+"_prev"]=undefined;
                     //alert("SelectedItemsChain[tg]:\n\n"+SelectedItemsChain[tg].outerHTML);
                                  // LI       TABLE       TBODY      TR                 TD[2]                item
                     SelectedItemsChain[tg].firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item";
                     //закомментил из-за сообщения об ошибке
                     SelectedItemsChain[tg]=undefined;
                     tg=tg2;
                    }
                    firstSic=-1;
                    lastSic=-1;
                     // LI       TABLE       TBODY      TR         TD[2]         item
                    activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item";
                    sic++;
                    //alert("SelectedItemsIndex[sclexNode]=sic; 1");
                    SelectedItemsIndex[sclexNode]=sic;
                    SelectedItemsChain[sic]=sclexNode;
                    if (lastSic!=-1) { SelectedItemsChain[lastSic+"_next"]=sic; }
                    SelectedItemsChain[sic+"_prev"]=lastSic;
                    lastSic=sic;
                    SelectedItemsChain[sic+"_next"]=-1;
                    if (firstSic==-1) { firstSic=sic; }
                    // LI       TABLE       TBODY      TR                 TD[2]                item
                    sclexNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item_highlighted_and_active";
                   } /*else {
                    // сюда попадаем if (event.ctrlKey==true)
                    if (SelectedItemsIndex[sclexNode]==null || SelectedItemsIndex[sclexNode]==undefined) {
                     alert("SelectedItemsIndex[sclexNode]==null || SelectedItemsIndex[sclexNode]==undefined");
                     activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item_highlighted";
                     sic++;
                     //alert("SelectedItemsIndex[sclexNode]=sic; 2");
                     SelectedItemsIndex[sclexNode]=sic;
                     SelectedItemsChain[sic]=sclexNode;
                     if (lastSic!=-1) { SelectedItemsChain[lastSic+"_next"]=sic; }
                     SelectedItemsChain[sic+"_prev"]=lastSic;
                     lastSic=sic;
                     SelectedItemsChain[sic+"_next"]=-1;
                     if (firstSic==-1) { firstSic=sic; }
                    } else {
                     alert("!(SelectedItemsIndex[sclexNode]==null || SelectedItemsIndex[sclexNode]==undefined)");
                     //удаляем элемент a2, т.к. он был выделен, а мы на него кликаем
                     //с нажатым Ctrl
                     var a2=SelectedItemsIndex[sclexNode];
                     var a1=SelectedItemsChain[a2+"_prev"];
                     var a3=SelectedItemsChain[a2+"_next"];
                     if (a1!=-1) { SelectedItemsChain[a1+"_next"]=a3; }
                     if (firstSic==a2) firstSic=a3;
                     SelectedItemsChain[a3+"_prev"]=a1;
                     if (lastSic==a3) lastSic=a1;
                     SelectedItemsChain[a2+"_prev"]=undefined;
                     SelectedItemsChain[a2+"_next"]=undefined;
                     SelectedItemsChain[a2]=undefined;
                    }
                   }*/
                  }
                  activeNode=sclexNode;
                  //                                LI        TABLE      TBODY        TR               TD[2]                  DIV
                  JSTreeObj.currentlyActiveItem=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;
                 }
                 event.cancelBubble = true;
                }
                ,
                timerDrag : function()
                {
                 if (this.dragDropTimer>=0 && this.dragDropTimer<10) {
                  this.dragDropTimer=this.dragDropTimer + 1;
                  setTimeout('JSTreeObj.timerDrag()',20);
                  return;
                 }
                 if (this.dragDropTimer==10)
                 {
                  JSTreeObj.floatingContainer.style.display='block';
                  JSTreeObj.floatingContainer.appendChild(JSTreeObj.dragNode_source);
                  dragDrop_x=mouseX + 5;
                  dragDrop_y=mouseY + 5;
                  JSTreeObj.floatingContainer.style.left=dragDrop_x+'px';
                  JSTreeObj.floatingContainer.style.top=dragDrop_y+'px';
                  calculateAndPaintScrollbar();
                 }
                }
                ,
                scrollA : function () {
                 var emptyDivMarginTopInString=document.getElementById("empty_div").style.marginTop;
                 var emptyDivMarginTopInNumber;
                 if (emptyDivMarginTopInString!="") {
                  var k=emptyDivMarginTopInString.lastIndexOf("px");
                  if (k<0) return;
                  emptyDivMarginTopInNumber=eval(emptyDivMarginTopInString.substr(0,k));
                 } else emptyDivMarginTopInNumber=0;

                 var newScrollPos=-emptyDivMarginTopInNumber+howToScroll;

                 if (howToScroll<0 && newScrollPos<0)
                  newScrollPos=0;

                 if (howToScroll>0 && newScrollPos>document.getElementById("empty_div").offsetHeight-document.body.clientHeight)
                  newScrollPos=document.getElementById("empty_div").offsetHeight-document.body.clientHeight;

                 if (newScrollPos!=-emptyDivMarginTopInNumber) {
                  dragDrop_x=mouseX/1 + 5;
                  dragDrop_y=mouseY/1 + 5;
                  JSTreeObj.floatingContainer.style.left=dragDrop_x+'px';
                  JSTreeObj.floatingContainer.style.top=dragDrop_y+'px';
                  sclexScrollTo(newScrollPos);
                  setTimeout("treeObj.scrollA();",scrollingInterval);
                  scrollFlag=true;
                 } else scrollFlag=false;
                }
                ,
                moveDragableNodes : function(e) {
                 //alert("moveDragableNodes: entry.");
                 if (JSTreeObj.dragDropTimer<10) return;
                 e=event;
                 mouseX=e.clientX;
                 mouseY=e.clientY;
                 if (mouseY/1>=0 && mouseY/1<=scrollIndent) {
                  howToScroll=-scrollStep;
                  if (!scrollFlag) {
                   setTimeout("treeObj.scrollA();",scrollingInterval);
                   scrollFlag=true;
                  }
                 }
                 if ((mouseY/1>=document.body.clientHeight-scrollIndent) && (mouseY/1<=document.body.clientHeight)) {
                  howToScroll=scrollStep;
                  if (!scrollFlag) {
                   setTimeout("treeObj.scrollA();",scrollingInterval);
                   scrollFlag=true;
                  }
                 }
                 if (mouseY/1>scrollIndent && mouseY/1<document.body.clientHeight-scrollIndent) howToScroll=0;

                 dragDrop_x=mouseX/1 + 5;
                 dragDrop_y=mouseY/1 + 5;
                 JSTreeObj.floatingContainer.style.left=dragDrop_x + 'px';
                 JSTreeObj.floatingContainer.style.top=dragDrop_y + 'px';

                 var thisObj=this;
                 if (thisObj.tagName=="P" || thisObj.tagName=="IMG" || thisObj.tagName=="TD" || thisObj.tagName=="DIV")
                  while (thisObj.nodeName!="LI") thisObj=thisObj.parentNode;
                 //в thisObj будет элемент LI, на который перетянули в текущий момент перетягиваемый элемент 
                 //в this будет точно тот элемент, на который перетянули
                 JSTreeObj.dragNode_noSiblings=false;
                 var tmpVar=thisObj.getAttribute('noSiblings');
                 if (tmpVar==false) tmpVar=thisObj.noSiblings;
                 if (tmpVar=="true") JSTreeObj.dragNode_noSiblings=true;
                 var floatingContainer=document.getElementById("floatingContainer");
                 //alert('thisObj.getAttribute("sclexType"):\n\n'+thisObj.getAttribute("sclexType"));
                 if (thisObj && thisObj.id &&
                     !(floatingContainer && floatingContainer.firstChild //перетягиваемый элемент существует?
                       && floatingContainer.firstChild.getAttribute("sclexType")=="body" //тип перетягиваемого элемента
                       && ((thisObj.getAttribute("sclexType")!="body" || (this.tagName=="P" ||
                            (this.nodeName=="TD" && this==this.parentNode.children[2]) || this.nodeName=="DIV"))
                            && thisObj.getAttribute("sclexType")!="root"
                          )
                      )
                    ) {
                  //alert("moveDragableNodes: if.");
                  JSTreeObj.dragNode_destination=thisObj;
                  var img=thisObj.getElementsByTagName('IMG')[1];
                  var tmpObj=JSTreeObj.dropTargetIndicator;
                  tmpObj.style.display='block';
                  //alert("tmpObj.style.display='block';");
                  var eventSourceObj=this;
                  if (JSTreeObj.dragNode_noSiblings && eventSourceObj.tagName=='IMG')
                                   // IMG           TD[1]      TR        TD[2]        DIV
                  eventSourceObj=eventSourceObj.parentNode.parentNode.children[2].firstChild;

                  var tmpImg=tmpObj.getElementsByTagName('IMG')[0];
                  if (this.nodeName=="BODY") { JSTreeObj.dragNode_destination=null;}
                  else {
                   if (this.tagName=="P" || (this.nodeName=="TD" && this==this.parentNode.children[2]) || this.nodeName=="DIV" || JSTreeObj.dragNode_noSiblings) {
                    tmpImg.src=tmpImg.src.replace('ind1','ind2');
                    JSTreeObj.insertAsSub=true;
                    tmpObj.style.left=(JSTreeObj.getLeftPos(eventSourceObj) + JSTreeObj.indicator_offsetX_sub) + 'px';
                   } else {
                    tmpImg.src=tmpImg.src.replace('ind2','ind1');
                    JSTreeObj.insertAsSub=false;
                    tmpObj.style.left=(JSTreeObj.getLeftPos(eventSourceObj) + JSTreeObj.indicator_offsetX) + 'px';
                   }
                  }
                  tmpObj.style.top=(JSTreeObj.getTopPos(thisObj) + JSTreeObj.indicator_offsetY) + 'px';
                  JSTreeObj.savedDropIndicator=tmpObj;
                  event.cancelBubble=true;
                 }
                 else {
                  //alert("moveDragableNodes: else.");
                  JSTreeObj.dragNode_destination=null;
                  var tmpObj=JSTreeObj.dropTargetIndicator;
                  tmpObj.style.display="none";
                  //if (thisObj) alert("thisObj.outerHTML:\n"+thisObj.outerHTML);
                 }

                 return false;
                }
                ,
                moveOnDocument:function() {
                 JSTreeObj.dragNode_destination=null;
                }
                ,
                dropDragableNodes:function()
                {
                 //alert("JSTreeObj.dragNode_destination:"+JSTreeObj.dragNode_destination.outerHTML);
                        //alert("dropDragableNodes: entry.");
                        howToScroll=0;
                        draggingNow=false;
                        if (JSTreeObj.dragDropTimer<10) {
                                JSTreeObj.dragDropTimer=-1;
                                return;
                        }
                        var showMessage=false;
                        if (JSTreeObj.dragNode_destination) {     // Check depth
                                //alert("dropDragableNodes: 1st if.");
                                var countUp=JSTreeObj.dragDropCountLevels(JSTreeObj.dragNode_destination,'up');
                                var countDown=JSTreeObj.dragDropCountLevels(JSTreeObj.dragNode_source,'down');
                                var countLevels=countUp/1 + countDown/1 + (JSTreeObj.insertAsSub?1:0);

                                if (countLevels>JSTreeObj.maximumDepth) {
                                        JSTreeObj.dragNode_destination=false;
                                        showMessage=true;     // Used later down in this function
                                }
                        }


                        if (JSTreeObj.dragNode_destination) {
                                //alert("dropDragableNodes: 2nd if.");
                                if (JSTreeObj.insertAsSub) {
                                // сюда попадаем, если надо вставить ВНУТРЬ destination-узла
                                        var uls=JSTreeObj.dragNode_destination.getElementsByTagName('UL');
                                        //alert("uls.length:"+uls.length);
                                        if (uls.length>0) {
                                                ul=uls[0];
                                                ul.style.display='block';

                                                var lis=ul.getElementsByTagName('LI');

                                                if (lis.length>0) {       // Sub elements exists - drop dragable node before the first one
                                                        ul.insertBefore(JSTreeObj.dragNode_source,lis[0]);
                                                } else { // No sub exists - use the appendChild method - This line should not be executed unless there's something wrong in the HTML, i.e empty <ul>
                                                        ul.appendChild(JSTreeObj.dragNode_source);
                                                }
                                        } else {
                                                var ul=document.createElement('UL');
                                                ul.style.display='block';
                                                //alert("JSTreeObj.dragNode_destination:"+JSTreeObj.dragNode_destination.outerHTML);
                                                JSTreeObj.dragNode_destination.appendChild(ul);
                                                ul.appendChild(JSTreeObj.dragNode_source);
                                        }
                                        var img=JSTreeObj.dragNode_destination.getElementsByTagName('IMG')[0];
                                        //alert("img.parentNode.parentNode.parentNode:\n\n"+img.parentNode.parentNode.parentNode.outerHTML);
                                        img.style.visibility='visible';
                                        img.src=img.src.replace(JSTreeObj.plusImage,JSTreeObj.minusImage);
                                } else { // попадаем сюда, если JSTreeObj.insertAsSub==false
                                        if (JSTreeObj.dragNode_destination.nextSibling) {
                                                var nextSib=JSTreeObj.dragNode_destination.nextSibling;
                                                //alert("nextSib:"+nextSib.outerHTML);
                                                nextSib.parentNode.insertBefore(JSTreeObj.dragNode_source,nextSib);
                                        } else {
                                                JSTreeObj.dragNode_destination.parentNode.appendChild(JSTreeObj.dragNode_source);
                                        }
                                }
                                /* Clear parent object */
                                var tmpObj=JSTreeObj.dragNode_parent;
                                var lis=tmpObj.getElementsByTagName('LI');
                                if (lis.length==0) {
                                        var img=tmpObj.parentNode.getElementsByTagName('IMG')[0];
                                        img.style.visibility='hidden';  // Hide [+],[-] icon
                                        tmpObj.parentNode.removeChild(tmpObj);
                                }
                        } else {
                                // Putting the item back to it's original location

                                if (JSTreeObj.dragNode_sourceNextSib) {
                                        //alert("insertBefore in dropDragableNodes.");
                                        JSTreeObj.dragNode_parent.insertBefore(JSTreeObj.dragNode_source,JSTreeObj.dragNode_sourceNextSib);
                                } else {
                                        //alert("appendChild in dropDragableNodes.");
                                        JSTreeObj.dragNode_parent.appendChild(JSTreeObj.dragNode_source);
                                }

                        }
                        JSTreeObj.dropTargetIndicator.style.display='none';
                        JSTreeObj.dragDropTimer=-1;
                        calculateAndPaintScrollbar();
                        if (showMessage && JSTreeObj.messageMaximumDepthReached)alert(JSTreeObj.messageMaximumDepthReached);
                }
                ,
                createDropIndicator : function()
                {
                        this.dropTargetIndicator=document.createElement('DIV');
                        this.dropTargetIndicator.style.position='absolute';
                        this.dropTargetIndicator.style.display='none';
                        var img=document.createElement('IMG');
                        img.src=this.imageFolder + 'dragDrop_ind1.gif';
                        img.id='dragDropIndicatorImage';
                        this.dropTargetIndicator.appendChild(img);
                        document.body.appendChild(this.dropTargetIndicator);

                }
                ,
                dragDropCountLevels : function(obj,direction,stopAtObject) {
                        var countLevels=0;
                        if (direction=='up') {
                                while(obj.parentNode && obj.parentNode!=stopAtObject) {
                                        obj=obj.parentNode;
                                        if (obj.tagName=='UL')countLevels=countLevels/1 +1;
                                }
                                return countLevels;
                        }

                        if (direction=='down') {
                                var subObjects=obj.getElementsByTagName('LI');
                                for(var no=0;no<subObjects.length;no++) {
                                        countLevels=Math.max(countLevels,JSTreeObj.dragDropCountLevels(subObjects[no],"up",obj));
                                }
                                return countLevels;
                        }
                }
                ,
                cancelEvent : function()
                {
                        return false;
                }
                ,
                cancelSelectionEvent : function()
                {

                        if (JSTreeObj.dragDropTimer<10)return true;
                        return false;
                }
                ,getNodeOrders : function(initObj,saveString)
                {

                        if (!saveString)var saveString='';
                        if (!initObj) {
                                initObj=document.getElementById(this.idOfTree);

                        }
                        var lis=initObj.getElementsByTagName('LI');

                        if (lis.length>0) {
                                var li=lis[0];
                                while(li) {
                                        if (li.id) {
                                                if (saveString.length>0)saveString=saveString + ',';
                                                var numericID=li.id.replace(/[^0-9]/gi,'');
                                                if (numericID.length==0)numericID='A';
                                                var numericParentID=li.parentNode.parentNode.id.replace(/[^0-9]/gi,'');
                                                if (numericID!='0') {
                                                        saveString=saveString + numericID;
                                                        saveString=saveString + '-';


                                                        if (li.parentNode.id!=this.idOfTree)saveString=saveString + numericParentID; else saveString=saveString + '0';
                                                }
                                                var ul=li.getElementsByTagName('UL');
                                                if (ul.length>0) {
                                                        saveString=this.getNodeOrders(ul[0],saveString);
                                                }
                                        }
                                        li=li.nextSibling;
                                }
                        }

                        if (initObj.id == this.idOfTree) {
                                return saveString;

                        }
                        return saveString;
                }
                ,highlightItem : function(inputObj,e)
                {
                 //if (JSTreeObj.currentlyActiveItem)JSTreeObj.currentlyActiveItem.className='';
                 //this.className='highlightedNodeItem';
                 this.className="item_highlighted";
                 JSTreeObj.currentlyActiveItem=this;
                }
                ,
                removeHighlight : function()
                {
                 /*код Sclex’а: начало*/
                 //alert("remove highlight");
                 if (elementUnderEditing) {
                  var r=document.body.createTextRange();
                  r.moveToElementText(elementUnderEditing.firstChild);
                  r.collapse(true);
                  if (r.parentElement!==elementUnderEditing.firstChild && r.move("character",1)==1) r.move("character",-1);
                  r.select();
                  elementUnderEditing.firstChild.removeAttribute("contentEditable");
                  elementUnderEditing=undefined;
                 }
                 /*код Sclex’а: конец*/
                 if (JSTreeObj.currentlyActiveItem)JSTreeObj.currentlyActiveItem.className="item";
                 JSTreeObj.currentlyActiveItem=false;
                 activeNode=undefined;
                }
                ,
                hasSubNodes : function(obj)
                {
                 var subs=obj.getElementsByTagName('LI');
                 if (subs.length>0)return true;
                 return false;
                }
                ,
                deleteItem : function(obj1,obj2)
                {
                 var l=obj2;
                 // item    TD         TR        TBODY      TABLE       LI                 
                 //if (l.parentNode.parentNode.parentNode.parentNode.parentNode==activeNode)
                 var while_flag=true;
                 while (while_flag) {
                  if (l) {
                   if (l.nodeName!="BODY" && !(l.nodeName=="DIV" &&
                       l.className.substr(0,4)=="item")) {
                    l=l.parentNode;
                   } else while_flag=false;
                  } else while_flag=false;
                 }
                 if (l.nodeName=="DIV" && l.className.substr(0,4)=="item") {
                  var l2=l.parentNode.parentNode.parentNode.parentNode.parentNode;
                  var message='Нажмите ОК, чтобы удалить элемент';
                  //                   item    TD          TR        TBODY     TABLE        LI
                  if (this.hasSubNodes(l2)) message=message + ' и его подэлементы';
                  if (confirm(message)) {
                   this.__deleteItem_step2(l2);       // Sending <LI> tag to the __deleteItem_step2 method
                  }
                 }
                }
                ,
                __refreshDisplay : function(obj)
                {
                        if (this.hasSubNodes(obj))return;

                        var img=obj.getElementsByTagName('IMG')[0];
                        img.style.visibility='hidden';
                }
                ,
                __deleteItem_step2 : function(obj)
                {
                  var saveString=obj.id.replace(/[^0-9]/gi,'');
                  var lis=obj.getElementsByTagName('LI');
                  //for(var no=0;no<lis.length;no++) {
                  // saveString=saveString + ',' + lis[no].id.replace(/[^0-9]/gi,'');
                  // lis[no].removeNode();
                  //}
                  //          LI     UL         LI
                  var tmpObj=obj.parentNode.parentNode;
                  goOneLevelUp();
                  if (activeNode==obj) {
                   JSTreeObj.currentlyActiveItem=false;
                   activeNode=null;
                  }
                  obj.removeNode(true);                                
                  var lis=tmpObj.getElementsByTagName('LI');
                  if (lis.length==0) {
                   var img=tmpObj.getElementsByTagName('IMG')[0];
                   img.style.visibility='hidden';  // Hide [+],[-] icon
                   //tmpObj.parentNode.removeChild(tmpObj);
                  }                  
                }
                ,
                __cancelRename : function(e,inputObj)
                {
                        JSTreeObj.renameState=JSTreeObj.RENAME_STATE_CANCELD;
                        if (!inputObj && this)inputObj=this;
                        inputObj.value=JSTreeObj.helpObj.innerHTML;
                        inputObj.nextSibling.innerHTML=JSTreeObj.helpObj.innerHTML;
                        inputObj.style.display='none';
                        inputObj.nextSibling.style.visibility='visible';
                        if (elementUnderEditing) {
                         elementUnderEditing.firstChild.removeAttribute("contentEditable");
                         elementUnderEditing=undefined;
                        }
                }
                ,
                __renameCheckKeyCode : function(e)
                {
                        if (document.all)e=event;
                        if (e.keyCode==13) {      // Enter pressed
                                JSTreeObj.__saveTextBoxChanges(false,this);
                        }
                        if (e.keyCode==27) {      // ESC pressed
                                JSTreeObj.__cancelRename(false,this);
                        }
                }
                ,
                __createTextBox : function(obj)
                {
                        var textBox=document.createElement('INPUT');
                        textBox.className='folderTreeTextBox';
                        textBox.value=obj.innerHTML;
                        obj.parentNode.insertBefore(textBox,obj);
                        textBox.id='textBox' + obj.parentNode.id.replace(/[^0-9]/gi,'');
                        textBox.onblur=this.__saveTextBoxChanges;
                        textBox.onkeydown=this.__renameCheckKeyCode;
                        this.__renameEnableTextBox(obj);
                }
                ,
                __renameEnableTextBox : function(obj)
                {
                        JSTreeObj.renameState=JSTreeObj.RENAME_STATE_BEGIN;
                        obj.style.visibility='hidden';
                        obj.previousSibling.value=obj.innerHTML;
                        obj.previousSibling.style.display='inline';
                        obj.previousSibling.select();
                }
                ,
                renameItem : function(obj1,obj2)
                {
                 var l=obj2;
                 var while_flag=true;
                 while (while_flag) {
                  if (l) {
                   if (l.nodeName!="BODY" && !(l.nodeName=="DIV" &&
                       l.className.substr(0,4)=="item")) {
                    l=l.parentNode;
                   } else while_flag=false;
                  } else while_flag=false;
                 }
                 if (l.nodeName=="DIV" && l.className.substr(0,4)=="item") {
                  //               DIV    TD         TR         TBODY     TABLE       LI
                  currentItemToEdit=l.parentNode.parentNode.parentNode.parentNode.parentNode;
                  if (currentItemToEdit.getAttribute("sclexType")=="text") return;
                  elementUnderEditing=l;
                  l.firstChild.setAttribute("contentEditable","true");
                  var r=document.selection.createRange();
                  if (!r || !("compareEndPoints" in r)) return;
                  r.moveToElementText(l.firstChild);
                  r.collapse(true);
                  if (r.parentElement!==l.firstChild && r.move("character",1)==1) r.move("character",-1);
                  r.select();
                 }
                }
                ,
                frameBySection : function (obj1,obj2) //обрамить элемент text тегом section
                {
                 //             TD           TR      TBODY      TABLE       LI
                 var el=obj2.parentNode.parentNode.parentNode.parentNode.parentNode;
                 while (el)
                   if (el.nodeName!="LI") el=el.parentNode;
                   else break;
                 if (el.nodeName=="LI") {
                  var newEl=document.createElement("LI");
                  a=document.getElementById("aTag");
                  if (a) a.removeAttribute("id");
                  a=document.getElementById("UL_id");
                  if (a) a.removeAttribute("id");
                  a=document.getElementById("folderImg");
                  if (a) a.removeAttribute("id");
                  a2++;
                  el.insertAdjacentHTML("beforeBegin",
                  '<LI id=a2_'+a2+' sclexType=section a3=0>'+
                   '<TABLE cellSpacing=0 cellPadding=0>'+
                    '<TBODY>'+
                     '<TR>'+
                      '<TD vAlign=top width=20><IMG src="images/minus.png"></TD>'+
                      '<TD vAlign=top width=20><IMG height=17 src="images/paper.png" width=16 id=folderImg></TD>'+
                      '<TD><DIV class=item id=aTag><P>&lt;section&gt;</P></DIV></TD>'+
                     '</TR>'+
                    '</TBODY>'+
                   '</TABLE>'+
                   '<UL id=UL_id style="DISPLAY:block">'+
                   '</UL>'+
                  '</LI>');
                  el=el.removeNode(true);
                  el=document.getElementById("UL_id").appendChild(el);
                  var img=document.getElementById("a2_"+a2).getElementsByTagName("IMG")[0];
                  img.onclick=JSTreeObj.showHideNode;
                  img.ondblclick=JSTreeObj.showHideNode;
                  var aTag=document.getElementById("aTag");
                  aTag.onmousedown=JSTreeObj.initDrag;
                  aTag=document.getElementById("aTag");
                  aTag.onmousemove=JSTreeObj.moveDragableNodes;
                  aTag.id='nodeATag'+a2;
                  var folderImg=document.getElementById("folderImg");
                  folderImg.onmousedown=JSTreeObj.initDrag;
                  folderImg=document.getElementById("folderImg");
                  folderImg.onmousemove=JSTreeObj.moveDragableNodes;
                  
                  JSTreeObj.contextMenu.attachToElement(aTag,false,menuModel);
                  
                  document.getElementById("folderImg").removeAttribute("id");
                  document.getElementById("UL_id").removeAttribute("id");
                 } 
                }
                ,
                initTree : function() {
                        JSTreeObj=this;
                        JSTreeObj.createDropIndicator();
                        document.documentElement.onselectstart=JSTreeObj.cancelSelectionEvent;
                        document.documentElement.ondragstart=JSTreeObj.cancelEvent;
                        //document.documentElement.onmousedown=JSTreeObj.removeHighlight;
                        /* Creating help object for storage of values */
                        this.helpObj=document.createElement('DIV');
                        this.helpObj.style.display='none';
                        document.body.appendChild(this.helpObj);

                        /* Create context menu */
                        if (this.deleteAllowed || this.renameAllowed) {
                                try{
                                        /* Creating menu model for the context menu, i.e. the datasource */
                                        menuModel=new DHTMLGoodies_menuModel();
                                        if (this.deleteAllowed) menuModel.addItem(1,'Удалить','','',false,'JSTreeObj.deleteItem');
                                        if (this.renameAllowed) menuModel.addItem(2,'Переименовать','','',false,'JSTreeObj.renameItem');
                                        menuModel.addItem(6,'Обрамить section-ом','','',false,'JSTreeObj.frameBySection');
                                        menuModel.init();

                                        menuModelRenameOnly=new DHTMLGoodies_menuModel();
                                        if (this.renameAllowed)menuModelRenameOnly.addItem(3,'Переименовать','','',false,'JSTreeObj.renameItem');
                                        menuModelRenameOnly.init();

                                        menuModelDeleteOnly=new DHTMLGoodies_menuModel();
                                        if (this.deleteAllowed)menuModelDeleteOnly.addItem(4,'Удалить','','',false,'JSTreeObj.deleteItem');
                                        menuModelDeleteOnly.addItem(5,'Обрамить section-ом','','',false,'JSTreeObj.frameBySection');
                                        menuModelDeleteOnly.init();

                                        window.refToDragDropTree=this;

                                        this.contextMenu=new DHTMLGoodies_contextMenu();
                                        this.contextMenu.setWidth(170);
                                        referenceToDHTMLSuiteContextMenu=this.contextMenu;
                                }catch(e) {

                                }
                        }

                        var nodeId=0;
                        var dhtmlgoodies_tree=document.getElementById(this.idOfTree);
                        var menuItems=dhtmlgoodies_tree.getElementsByTagName('LI');   // Get an array of all menu items
                        for(var no=0;no<menuItems.length;no++)
                         if (true) {//(menuItems[no].getAttribute("TextType")!="true") {
                                // No children var set ?
                                var noChildren=false;
                                var tmpVar=menuItems[no].getAttribute('noChildren');
                                if (!tmpVar)tmpVar=menuItems[no].noChildren;
                                if (tmpVar=='true')noChildren=true;
                                // No drag var set ?
                                var noDrag=false;
                                var tmpVar=menuItems[no].getAttribute('noDrag');
                                if (!tmpVar)tmpVar=menuItems[no].noDrag;
                                if (tmpVar=='true')noDrag=true;
                                nodeId++;
                                var subItems=menuItems[no].getElementsByTagName('UL');
                                //var img=document.createElement('IMG');
                                var img=menuItems[no].getElementsByTagName("TD")[0].firstChild;
                                if (img) {
                                 //img.src=this.imageFolder + this.plusImage;
                                 img.onclick=JSTreeObj.showHideNode;
                                 img.ondblclick=JSTreeObj.showHideNode;
                                 if (subItems.length==0)img.style.visibility='hidden';
                                 //блок закомменчен недавно
                                 /*else {

                                         subItems[0].id='tree_ul_' + treeUlCounter;
                                         treeUlCounter++;
                                 }*/
                                 menuItems[no].getElementsByTagName("TD")[0].insertBefore(img,null);
                                }
                                aTag=menuItems[no].getElementsByTagName('TABLE')[0].getElementsByTagName('DIV')[0];
                                //следующая строка (не две) закомменчены недавно by Sclex
                                aTag.id='nodeATag' + menuItems[no].id.replace(/^a2_/gi,'');
                                if (!noDrag) aTag.onmousedown=JSTreeObj.initDrag;
                                if (!noChildren) aTag.onmousemove=JSTreeObj.moveDragableNodes;
                                //menuItems[no].id='dhtmlgoodies_treeNode' + nodeId;
                                var folderImg=document.createElement('IMG');
                                if (!noDrag) folderImg.onmousedown=JSTreeObj.initDrag;
                                folderImg.onmousemove=JSTreeObj.moveDragableNodes;
                                if (menuItems[no].className) {
                                        folderImg.src=this.imageFolder + menuItems[no].className;
                                } else {
                                        folderImg.src=this.imageFolder + this.folderImage;
                                }
                                menuItems[no].getElementsByTagName("TD")[1].insertBefore(folderImg,null);
                                if (this.contextMenu) {
                                        var noDelete=menuItems[no].getAttribute('noDelete');
                                        if (!noDelete)noDelete=menuItems[no].noDelete;
                                        var noRename=menuItems[no].getAttribute('noRename');
                                        if (!noRename)noRename=menuItems[no].noRename;
                                        if (noRename=='true' && noDelete=='true') {} else {
                                                if (noDelete == 'true')this.contextMenu.attachToElement(aTag,false,menuModelRenameOnly);
                                                else if (noRename == 'true')this.contextMenu.attachToElement(aTag,false,menuModelDeleteOnly);
                                                else this.contextMenu.attachToElement(aTag,false,menuModel);

                                        }
                                }
                                this.addEvent(aTag,'contextmenu',this.highlightItem);
                         }

                        document.documentElement.onmousemove=JSTreeObj.moveDragableNodes;
                        document.documentElement.onmouseup=JSTreeObj.dropDragableNodes;
                }
        }
  </script>
  <script language=JavaScript type="text/javascript">
   var plusPicture="plus.png";
   var minusPicture="minus.png";

   var activeItem=null;
   var el, fbw_body, params;
   var ptrCnt=0;
   var node1;
   var dragNDropNow=false;
   var leftButtonPressed=false;
   var x1,y1;

function initStructure() {

 var node2;
 var a1=0;
 var a3=1;

 function Rec(savePtr,node,prnt,createTbl) {

  function createUlIfNeed(none) {
   if (ul==null) {
    ul=document.createElement("UL");
      //16
    if (none==true) {ul.style.display="none";}
    ul=node.appendChild(ul);
   }
  }
//  MsgBox("Вошли в Rec\nsavePtr.outerHTML="+savePtr.outerHTML+"\ncreateTbl="+createTbl);
  function makeTextNode(b1,b2) {
   var nodeA;
   nodeA=document.createElement("LI");
   nodeA.style.display="none";
   nodeA.setAttribute("sclexType","text");
   nodeA.setAttribute("noRename","true");
   nodeA.setAttribute("noChildren","true");
   a2++;
   nodeA.setAttribute("id","a2_"+a2);
   a3++;
   nodeA.setAttribute("a3",a3);
   params["a3_"+a3+"_begin"]=b1;
   params["a3_"+a3+"_end"]=b2;
   nodeA.innerHTML="<TABLE cellpadding=0 cellspacing=0>"+
                    "<TBODY>"+
                     "<TR>"+
                      "<TD valign=top width=20></TD>"+
                      "<TD valign=top width=20></TD>"+
                      "<TD><DIV class=item>&lt;text&gt;</DIV></TD>"+
                     "</TR>"+
                    "</TBODY>"+
                   "</TABLE>";
   createUlIfNeed(!(savePtr.parentNode.nodeName=="DIV" &&
                    (savePtr.parentNode.className=="body" ||
                     savePtr.parentNode.getAttribute("id")=="fbw_body")));
   ul.appendChild(nodeA);
  }

  var textNow=false;
  var textBeginPtr,textEndPtr;
  var goMore=true;
  var ul=null;
  var nodeA,node1,node2,node3,node4,node5,node6,node7,node8,wasBodyOrSection;
  node1=document.createElement("TABLE");
  node1.setAttribute("cellspacing","0");
  node1.setAttribute("cellpadding","0");
//  node1.setAttribute("width","100%");
  node2=document.createElement("TR");
  node2=node1.appendChild(node2);
  node3=document.createElement("TD"); //первая ячейка
  node3.setAttribute("valign","top");
  node3.setAttribute("width","20");
  node3=node2.appendChild(node3);
  node4=document.createElement("TD");
  node4.setAttribute("valign","top");
  node4.setAttribute("width","20");
  node4=node2.appendChild(node4);
  node7=document.createElement("TD"); //третья ячейка
  node7=node2.appendChild(node7);
  node5=document.createElement("DIV"); //DIV class=item
  node5.className="item";
  node5=node7.appendChild(node5);
  ptr=savePtr;
  wasBodyOrSection=false;
  while (ptr!=null) {
//   MsgBox("while\nptr.outerHTML:"+ptr.outerHTML);
   if (ptr.nodeName=="DIV" && (ptr.className=="section" || ptr.className=="body")) {
    nodeA=document.createElement("LI");
    nodeA.setAttribute("sclexType",ptr.className);
    if (ptr.className=="body" && ptr.getAttribute("fbname")) nodeA.setAttribute("fbname",ptr.getAttribute("fbname"));
    a2++;
    nodeA.setAttribute("id","a2_"+a2);
    a3++;
    nodeA.setAttribute("a3",a3);
    params["a3_"+a3+"_el"]=ptr;
    var myptr=ptr;
    Rec(ptr.firstChild,nodeA,ptr,true);
    ptr=myptr;
//    MsgBox("Вышли из Rec.\n");
//    MsgBox("ptr="+ptr.outerHTML);
    createUlIfNeed(!(savePtr.parentNode.nodeName=="DIV" &&
                    (savePtr.parentNode.className=="body" ||
                     savePtr.parentNode.getAttribute("id")=="fbw_body")));
    ul.appendChild(nodeA);
    wasBodyOrSection=true;
   }
   if (ptr.nodeName=="DIV" && ptr.className=="title") {
    node6=ptr.cloneNode(true);
    node5.innerHTML=node6.outerHTML;
   }
   if (ptr.nodeName=="P" ||
       (ptr.nodeName=="DIV" && (ptr.className=="poem" || ptr.className=="cite" || ptr.className=="image"))) {
    textBeginPtr=ptr;
    while (ptr && (ptr.nodeName=="P" ||
       (ptr.nodeName=="DIV" && (ptr.className=="poem" || ptr.className=="cite" || ptr.className=="image")))) {
     textEndPtr=ptr;
     ptr=ptr.nextSibling;
    }
    makeTextNode(textBeginPtr,textEndPtr);
   } else ptr=ptr.nextSibling;
  }
  if (node5.firstChild==null) {
   node6=document.createElement("P");
   if (prnt.className=="section") {node6.innerHTML="&lt;section&gt;";}
   else if (prnt.className=="body") {node6.innerHTML="&lt;body&gt;";}
      else if (prnt.className=="body") {node6.innerHTML="&lt;body&gt;";}
    else if (prnt.getAttribute("id")=="fbw_body") {node6.innerHTML="Книга";}
   node5.appendChild(node6);
  }
  if (wasBodyOrSection)
   if ((prnt.nodeName=="DIV" && prnt.className=="body")
       || prnt.getAttribute("id")=="fbw_body")
    node3.innerHTML='<img src="images/minus.png">';
   else
    node3.innerHTML='<img src="images/plus.png">';
  else node3.innerHTML='<img src="images/plus.png" style="visibility:hidden">';
  node1=node.insertBefore(node1,node.firstChild);
 }

 var ptrCnt=0;
 var rslt;
 node1=document.createElement("UL");
 node1.setAttribute("id","dhtmlgoodies_tree2");
 node2=document.createElement("LI");
 node2.setAttribute("noDrag","true");
 node2.setAttribute("noSiblings","true");
 node2.setAttribute("noDelete","true");
 node2.setAttribute("noRename","true");
 node2.setAttribute("sclexType","root");
 a2++;
 node2.setAttribute("id","a2_"+a2);
 node2=node1.appendChild(node2);
 Rec(fbw_body.firstChild,node2,fbw_body);
}

 function paintScrollbar(myScrollPos_,runnerHeight_) {
  //alert("paintScrollbar1");
  document.getElementById("ScrollLineTop");
  //alert("paintScrollbar2");
  //alert("myScrollPos_:"+myScrollPos_);
  document.getElementById("ScrollLineTop").style.height=myScrollPos_+"px";
  //alert("paintScrollbar3");
  document.getElementById("ScrollRunnerCenter").style.height=runnerHeight_+"px";
  var scrollBarHeight_=document.body.clientHeight-scrollButtonUpHeight-scrollButtonDownHeight;
  document.getElementById("ScrollLineBottom").style.height=(scrollBarHeight_-myScrollPos_-runnerHeight_-2-2>=0)?((scrollBarHeight_-myScrollPos_-runnerHeight_-2-2)+"px"):"0px";
  //alert("document.body.clientHeight:"+document.body.clientHeight+"\n"+
  //      "document.body.offsetHeight:"+document.body.offsetHeight+"\n"+
  //      "document.getElementById('empty_div').offsetHeight:"+document.getElementById('empty_div').offsetHeight+"\n"+
  //      "scrollBarHeight_:"+scrollBarHeight_+"\n"+
  //      "runnerHeight_:"+runnerHeight_+"\n"+
  //      "ScrollLineBottom.height:"+document.getElementById("ScrollLineBottom").style.height);
 }

 function preInit () {
   document.all.for_messages.style.display="block";
   document.all.for_messages.innerHTML="<P class='outside_loading'><SPAN class='loading'>&nbsp;Загружается оглавление...&nbsp;</SPAN></P>";
   setTimeout("Init();",1);
  }

 function Init() {
  returnValue=null;
  params=window.dialogArguments;
  fbw_body=params["fbw_body"];
  var emptySection=document.createElement("DIV");
  emptySection.className="section";  
  params["a3_0_el"]=emptySection;
  initStructure();
  //alert(structure.outerHTML);
  document.all.for_messages.innerHTML="";
  document.all.for_messages.style.display="none";
  document.all.empty_div.innerHTML=node1.outerHTML;
  //не забыть удалить следующую строку
  //window.clipboardData.setData("text",node1.outerHTML);
  treeObj=new JSDragDropTree();
  treeObj.setTreeId('dhtmlgoodies_tree2');
  treeObj.setMaximumDepth(20);
  treeObj.setMessageMaximumDepthReached('Слишком большой уровень вложенности'); // If you want to show a message when maximum depth is reached, i.e. on drop.
  treeObj.initTree();
  //document.getElementById("vscrollbar").style.display="block";
  //document.getElementById("scrolling_div").style.width="670px";
  calculateAndPaintScrollbar();
  var resizeTimer = null;
  var resizeInterval = 100;
   window.onresize = function() {
   if (resizeTimer != null) {
    clearTimeout(resizeTimer);
    resizeTimer = null;
   }
   resizeTimer = setTimeout("calculateAndPaintScrollbar();", resizeInterval);
  }
  window.onresizeend=function() {
   calculateAndPaintScrollBar();
  }
  document.getElementById("empty_div").focus();
 }

 function showTextNodes() {
  var i;
  var kl;
  var lis=document.all[treeObj.idOfTree].getElementsByTagName("LI");
  for (i=0;i<lis.length;i++) {
   if (lis[i].getAttribute("sclexType")=="text") {
    lis[i].style.display="";
    kl=lis[i].parentNode.parentNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[0];
   //   LI        UL           LI       TABLE       TBODY      TR               TD[0]
     kl.innerHTML="<IMG src=images/plus.png>";
     kl.firstChild.onclick=JSTreeObj.showHideNode;
     kl.firstChild.ondblclick=JSTreeObj.showHideNode;
   }
  }
 }

 function hideTextNodes() {
  var i;
  var kl;
  var flag;
  var lis=document.all[treeObj.idOfTree].getElementsByTagName("LI");
  for (i=0;i<lis.length;i++) {
   if (lis[i].getAttribute("sclexType")=="text") {
    lis[i].style.display="none";
    flag=true;
    ptr=lis[i].parentNode.firstChild;
    while (flag) {
     if (ptr) {
      if (ptr.nodeName=="LI" && ptr.getAttribute("sclexType")!="text") flag=false
      else ptr=ptr.nextSibling;
     } flag=false;
    }
    if (flag==false) {
     //  LI       UL         LI       TABLE       TBODY      TR               TD[0]
     kl=lis[i].parentNode.parentNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[0];
     kl.innerHTML="";
    }
   }
  }
 }

 var level;

 function saveTreeRec(node) {
  level++;
  var ptr=node;
  var htmlStr="";
  var name,type,poi,kk,flag,a1,a2,id;
  while (ptr) {
   type=ptr.getAttribute("sclexType");
   if (type=="body" || type=="section" || type=="root") {
    if (type=="body") {
     htmlStr+="<DIV class=body";
     poi=params["a3_"+ptr.getAttribute("a3")+"_el"];
     name=poi.getAttribute("fbname");
     if (level==2 && name) htmlStr+=' fbname="'+name+'"';
     htmlStr+=">";
     poi=poi.firstChild;
     var flag=true;
     while (flag) {
      if (poi) {
        if (poi.nodeName=="P" || (poi.nodeName=="DIV" && (poi.className=="poem" ||
           poi.className=="cite" || poi.className=="image" || poi.className=="section"))) {
          flag=false;
         } else {
          if (!(poi.nodeName=="DIV" && poi.className=="title")) htmlStr+=poi.outerHTML;
          else htmlStr+=ptr.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.firstChild.outerHTML;
          poi=poi.nextSibling;
         }
       } else flag=false;
     }
    }
    if (type=="section") {
     htmlStr+="<DIV class=section";
     poi=params["a3_"+ptr.getAttribute("a3")+"_el"];
     name=poi.getAttribute("id");
     if (level>2 && name) htmlStr+=' id="'+name+'"';
     htmlStr+=">";
     poi=poi.firstChild;
     var flag=true;
     while (flag) {
      if (poi) {
        if (poi.nodeName=="P" || (poi.nodeName=="DIV" && (poi.className=="poem" ||
            poi.className=="cite" || poi.className=="image" || poi.className=="section"))) {
          flag=false;
         } else {
          if (!(poi.nodeName=="DIV" && poi.className=="title")) htmlStr+=poi.outerHTML;
          else {
           ptr.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.firstChild.removeAttribute("contentEditable");
           htmlStr+=ptr.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.firstChild.outerHTML.replace(hrefInTitleRegExp,hrefInTitleRegExp_);
          }
          poi=poi.nextSibling;
         }
       } else flag=false;
     }
    }
    //  LI   TABLE
    kk=ptr.firstChild;
    flag=true;
    while (flag) {
     if (kk) {
      if (kk.nodeName!="UL") {kk=kk.nextSibling}
      else flag=false;
     } else flag=false;
    }
    //                           UL    LI
    if (kk) if (kk.nodeName=="UL") htmlStr+=saveTreeRec(kk.firstChild);
    if (type=="body" || type=="section") {
     htmlStr+="</DIV>";
    }
   }
   if (type=="text") {
    a1=params["a3_"+ptr.getAttribute("a3")+"_begin"];
    a2=params["a3_"+ptr.getAttribute("a3")+"_end"];
    pt=a1;
    while (pt!=a2) {
     if (pt.nodeName=="P" && pt.innerHTML=="") {
       id=pt.getAttribute("id");
       htmlStr+="<P";
       if (id) htmlStr+=' id="'+id+'"';
       htmlStr+=">&nbsp;</P>";
     } else htmlStr+=pt.outerHTML;
     pt=pt.nextSibling;
    }
    if (pt.nodeName=="P" && pt.innerHTML=="") {
     id=pt.getAttribute("id");
     htmlStr+="<P";
     if (id) htmlStr+=' id="'+id+'"';
     htmlStr+=">&nbsp;</P>";
    } else htmlStr+=pt.outerHTML;
    pt=pt.nextSibling;
   }
   ptr=ptr.nextSibling;
  }
  level--;
  return htmlStr;
 }

 function preSave() {
  document.all.for_messages.style.display="block";
  document.all.for_messages.innerHTML="<P class='outside_loading'><SPAN class='loading'>&nbsp;Сохраняется новая структура документа...&nbsp;</SPAN></P>";
  setTimeout("save();",1);
 }

 function allParentNodesAreDisplayBlock(justNode) {
  var myNode=justNode;
  while ((myNode.nodeName=="LI" || myNode.nodeName=="UL") && myNode.style.display!="none") myNode=myNode.parentNode;
  if (myNode.nodeName=="LI" || myNode.nodeName=="UL") return false;
  return true;
 }

 function scrollToMakeActiveNodeVisibleWhenGoingDown() {
  var itemNode=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;

  var emptyDivMarginTopInString=document.getElementById("empty_div").style.marginTop;
  var emptyDivMarginTopInNumber;
  if (emptyDivMarginTopInString!="") {
   var k=emptyDivMarginTopInString.lastIndexOf("px");
   if (k<0) emptyDivMarginTopInNumber=0;
   else emptyDivMarginTopInNumber=eval(emptyDivMarginTopInString.substr(0,k));
  } else emptyDivMarginTopInNumber=0;

  var totalItemNodeOffsetTop=0;
  var el=itemNode;
  while (el.nodeName!="DIV" || el.id!="empty_div") {
   totalItemNodeOffsetTop+=el.offsetTop;
   el=el.offsetParent;
  }
  if (-emptyDivMarginTopInNumber<totalItemNodeOffsetTop+itemNode.offsetHeight-document.body.clientHeight)
   sclexScrollTo(totalItemNodeOffsetTop+itemNode.offsetHeight-document.body.clientHeight+40);
  if (totalItemNodeOffsetTop+itemNode.offsetHeight<-emptyDivMarginTopInNumber)
   sclexScrollTo(totalItemNodeOffsetTop-Math.round(document.body.clientHeight/2));
 }

 function scrollToMakeActiveNodeVisibleWhenGoingUp() {
  var itemNode=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;

  var emptyDivMarginTopInString=document.getElementById("empty_div").style.marginTop;
  var emptyDivMarginTopInNumber;
  if (emptyDivMarginTopInString!="") {
   var k=emptyDivMarginTopInString.lastIndexOf("px");
   if (k<0) emptyDivMarginTopInNumber=0;
   else emptyDivMarginTopInNumber=eval(emptyDivMarginTopInString.substr(0,k));
  } else emptyDivMarginTopInNumber=0;

  var totalItemNodeOffsetTop=0;
  var el=itemNode;
  while (el.nodeName!="DIV" || el.id!="empty_div") {
   totalItemNodeOffsetTop+=el.offsetTop;
   el=el.offsetParent;
  }

  if (-emptyDivMarginTopInNumber>totalItemNodeOffsetTop)
   sclexScrollTo(totalItemNodeOffsetTop-40);
  if (totalItemNodeOffsetTop>-emptyDivMarginTopInNumber+document.body.clientHeight)
   sclexScrollTo(totalItemNodeOffsetTop-Math.round(document.body.clientHeight/2));
 }

 function goOneElementUp() {
  if (!activeNode) return;
   //     LI        LI
  var currNode=activeNode;
  firstTime=true;
  while (currNode!=null && (!allParentNodesAreDisplayBlock(currNode) || firstTime)) {
   if (currNode!=null && currNode.previousSibling!=null && currNode.previousSibling.nodeName=="LI") {
    //alert("if");
    //                                                               LI         LI                                LI        UL       LI|DIV
    currNode=currNode.previousSibling;
    //        LI        UL
    while (currNode.lastChild!=null && currNode.lastChild.nodeName=="UL" &&
     //  LI        UL        LI
     currNode.lastChild.lastChild!=null && currNode.lastChild.lastChild.nodeName=="LI") currNode=currNode.lastChild.lastChild;
   }
   else {
    if (currNode!=null && currNode.parentNode.parentNode.nodeName=="LI") currNode=currNode.parentNode.parentNode;
    if (currNode.nodeName!="LI" || currNode.getAttribute("sclexType")=="root") return;
    //alert("else");
   }
   firstTime=false;
  }
  if (!currNode) return;
      //LI       TABLE    TBODY        TR               TD[2]                   DIV
  activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item";
  //alert("after while 2\n"+currNode.outerHTML);
  currNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item_highlighted_and_active";
  //alert("after while 3");
  activeNode=currNode;
  //                                LI        TABLE      TBODY        TR               TD[2]                  DIV
  JSTreeObj.currentlyActiveItem=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;
  scrollToMakeActiveNodeVisibleWhenGoingUp();
 }

 function goOneElementDown() {
  if (!activeNode) return;
  //     LI        LI
  var currNode=activeNode;
  firstTime=true;
  while (currNode!=null && (currNode.style.display=="none" || firstTime)) {
   //                                  LI      TABLE        UL                   LI      TABLE        UL                          LI       TABLE       UL
   if (currNode.firstChild!=null && currNode.firstChild.nextSibling!=null && currNode.firstChild.nextSibling.nodeName=="UL" && currNode.firstChild.nextSibling.style.display!="none" &&
       // LI      TABLE        UL          LI
       currNode.firstChild.nextSibling.firstChild!=null && currNode.firstChild.nextSibling.firstChild.nodeName=="LI")
    currNode=currNode.firstChild.nextSibling.firstChild;
   else {
    //                                                               LI         UL       LI
    while (currNode!=null && currNode.nextSibling==null && currNode.parentNode!=null && currNode.parentNode.parentNode!=null) currNode=currNode.parentNode.parentNode;
    if (currNode.nodeName!="LI") return;
    currNode=currNode.nextSibling;
   }
   firstTime=false;
  }
  if (!currNode) return;
  activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item";
  currNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item_highlighted_and_active";
  activeNode=currNode;
  //                                LI        TABLE      TBODY        TR               TD[2]                  DIV
  JSTreeObj.currentlyActiveItem=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;
  scrollToMakeActiveNodeVisibleWhenGoingDown();
 }

 function goOneLevelUp() {
  if (!activeNode) return;
  var currNode=activeNode;
  if (currNode.parentNode==null || currNode.parentNode.nodeName!="UL" ||
      currNode.parentNode.parentNode==null || currNode.parentNode.parentNode.nodeName!="LI" ||
      currNode.parentNode.parentNode.getAttribute("sclexType")=="root") return;
  currNode=currNode.parentNode.parentNode;
  activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item";
  currNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild.className="item_highlighted_and_active";
  activeNode=currNode;
  //                                LI        TABLE      TBODY        TR               TD[2]                  DIV
  JSTreeObj.currentlyActiveItem=activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild;
  scrollToMakeActiveNodeVisibleWhenGoingUp();
 }

 function onKeyDown() {
  //alert(event.keyCode);
  /*if (event.keyCode==13) {
   return false;
  }*/
  //40 - ArrowDown
  if (event.keyCode==40 && !elementUnderEditing) {
   if (!activeNode || draggingNow) {
    sclexScrollBy(-scrollStepInPixels);
    return;
   }
   goOneElementDown();
  }
  //38 - ArrowUp
  if (event.keyCode==38 && !elementUnderEditing) {
   if (!activeNode || draggingNow) {
    sclexScrollBy(scrollStepInPixels);
    return;
   }
   goOneElementUp();
  }
  //39 - Arrow Right
  if (event.keyCode==39 && !elementUnderEditing) {
   //                                             LI        TABLE      UL               LI        TABLE      UL
   if (activeNode && activeNode.firstChild && activeNode.firstChild.nextSibling && activeNode.firstChild.nextSibling.nodeName=="UL" &&
    //        LI        TABLE      UL
       activeNode.firstChild.nextSibling.style.display=="none")
    JSTreeObj.showHideNode(false,activeNode.id);
   else if (activeNode && activeNode.lastChild.nodeName=="UL")
     goOneElementDown();
   return;
  }
  //37 - Arrow Left
  if (event.keyCode==37 && !elementUnderEditing) {
   //                                              LI        TABLE      UL               LI        TABLE      UL
   if (activeNode && activeNode.firstChild && activeNode.firstChild.nextSibling && activeNode.firstChild.nextSibling.nodeName=="UL" &&
       activeNode.firstChild.nextSibling.style.display!="none")
    JSTreeObj.showHideNode(false,activeNode.id);
   else goOneLevelUp();
   return;
  }
  //36 - Home - к началу дерева
  if (event.keyCode==36 && !elementUnderEditing) {
   sclexScrollBy(10000000);
   return;
  }
  //35 - End - к концу дерева
  if (event.keyCode==35 && !elementUnderEditing) {
   sclexScrollBy(-10000000);
   return;
  }
  if (event.keyCode==13 && event.shiftKey) {
   event.returnValue=false;
   return false;
  }
  //Escape - закончить переименование
  if (event.keyCode==27 || (event.keyCode==13 && event.ctrlKey && !event.altKey && !event.shiftKey)) {
   if (elementUnderEditing) {
    var r=document.body.createTextRange();
    r.moveToElementText(elementUnderEditing.firstChild);
    r.collapse(true);
    if (r.parentElement!==elementUnderEditing.firstChild && r.move("character",1)==1) r.move("character",-1);
    r.select();
    elementUnderEditing.firstChild.removeAttribute("contentEditable");
    elementUnderEditing=undefined;
   }
   calculateAndPaintScrollbar();
  }
  //113 - F2 - переименовать
  if (event.keyCode==113) {
                                                    //LI        TABLE     TBODY       TR                TD[2]                 item
   if (activeNode) JSTreeObj.renameItem(undefined,activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild);
   return;
  }
  //33 - Page up - на экран вверх
  if (event.keyCode==33) {
   sclexScrollBy(document.body.clientHeight);
   return;
  }
  //34 - Page down - на экран вниз
  if (event.keyCode==34) {
   sclexScrollBy(-document.body.clientHeight);
   return;
  }
  //107 - Plus
  if (event.keyCode==107 && !elementUnderEditing) {
   //                     LI        TABLE      UL                             LI        TABLE      UL
   if (activeNode && activeNode.firstChild.nextSibling.nodeName=="UL" && activeNode.firstChild.nextSibling.style.display=="none")
    //                     LI       TABLE      TBODY       TR                 TD[0]                      IMG[0]
    JSTreeObj.showHideNode(false,activeNode.id/*.firstChild.firstChild.firstChild.getElementsByTagName("TD")[0].getElementsByTagName("IMG")[0]*/);
   return;
  }
  //109 - Minus
  if (event.keyCode==109 && !elementUnderEditing) {
   //                     LI        TABLE      UL                             LI        TABLE      UL
   if (activeNode && activeNode.firstChild.nextSibling.nodeName=="UL" && activeNode.firstChild.nextSibling.style.display!="none")
    //                     LI       TABLE      TBODY       TR                 TD[0]                      IMG[0]
    JSTreeObj.showHideNode(false,activeNode.id/*.firstChild.firstChild.firstChild.getElementsByTagName("TD")[0].getElementsByTagName("IMG")[0]*/);
   return;
  }
  //46 - Delete
  if (event.keyCode==46 && !elementUnderEditing) {
   //                             LI        TABLE     TBODY       TR                TD[2]                 item
   JSTreeObj.deleteItem(null,activeNode.firstChild.firstChild.firstChild.getElementsByTagName("TD")[2].firstChild);
   return;
  }
 }

 function initDragScrollbar() {
  //alert("initDragScrollbar");
  document.body.onmousemove=function () {
   //alert("window.onmousemove");
   var offset=event.clientY-dragFromY;
   var newScrollPos=rememberedScrollPos+offset;
   var runnerHeight=document.getElementById("ScrollRunnerCenter").style.pixelHeight;
   //alert("document.getElementById(\"ScrollRunnerCenter\").pixelHeight:"+document.getElementById("ScrollRunnerCenter").pixelHeight);
   //alert("runnerHeight in initDragScrollbar:"+runnerHeight);
   var scrollbarHeight=document.body.clientHeight-scrollButtonUpHeight-scrollButtonDownHeight;
   if (newScrollPos<0) newScrollPos=0;
   else if (newScrollPos+2+runnerHeight+2>scrollbarHeight) newScrollPos=scrollbarHeight-runnerHeight-2-2;
   //alert("newScrollPos:"+newScrollPos);
   paintScrollbar(newScrollPos,runnerHeight);
   document.getElementById("empty_div").style.marginTop=Math.round(-newScrollPos/scrollbarHeight*document.getElementById("empty_div").offsetHeight)+"px";
  }
  document.body.onmouseup=function () {
   document.body.onmousemove=null;
   document.onmouseup=null;
  }
  dragFromY=event.clientY;
  rememberedScrollPos=document.getElementById("ScrollLineTop").style.pixelHeight;
 }

 function myonmousewheel() {
  sclexScrollBy(event.wheelDelta/120*scrollStepInPixels);
 }

 function restoreBottomLine() {
  document.getElementById("ScrollLineBottom").src="Images/ScrollLine.png";
 }

 function blackenBottomLine() {
  document.getElementById("ScrollLineBottom").src="Images/ScrollBlack.png";
  setTimeout('restoreBottomLine()',100);
 }

 function restoreTopLine() {
  document.getElementById("ScrollLineTop").src="Images/ScrollLine.png";
 }

 function blackenTopLine() {
  document.getElementById("ScrollLineTop").src="Images/ScrollBlack.png";
  setTimeout('restoreTopLine()',100);
 }

 function turningOffBottomScrollbarTimer(pixelsToScroll) {
  blackenBottomLine();
  setTimeout("turningOffBottomScrollbarTimer_continue("+pixelsToScroll+");",0);
 }

 function turningOffBottomScrollbarTimer_continue(pixelsToScroll) {
  var scrollPos=document.getElementById("ScrollLineTop").style.pixelHeight;
  var runnerHeight=document.getElementById("ScrollRunnerCenter").style.pixelHeight;
  if ((scrollPos+runnerHeight+2+2>scrollLineClickedY) && scrollbarTimer) clearInterval(scrollbarTimer);
  else sclexScrollBy(pixelsToScroll);
 }

 function turningOffTopScrollbarTimer(pixelsToScroll) {
  blackenTopLine();
  setTimeout("turningOffTopScrollbarTimer_continue("+pixelsToScroll+");",0);
 }

 function turningOffTopScrollbarTimer_continue(pixelsToScroll) {
  var scrollPos=document.getElementById("ScrollLineTop").style.pixelHeight;
  if ((scrollPos<scrollLineClickedY) && scrollbarTimer) clearInterval(scrollbarTimer);
  else sclexScrollBy(pixelsToScroll);
 }

 function clickOnScrollbar(pixelsToScroll,needStartTimer,whereClicked) {
  if (whereClicked=="top-line") blackenTopLine();
  else if (whereClicked=="bottom-line") blackenBottomLine();
  setTimeout("clickOnScrollbar_continue("+pixelsToScroll+","+needStartTimer+",'"+whereClicked+"',"+event.clientY+")",0);
 }

 function clickOnScrollbar_continue(pixelsToScroll,needStartTimer,whereClicked,myClientY) {
  sclexScrollBy(pixelsToScroll);
  if (scrollbarTimer) clearInterval(scrollbarTimer);
  if (needStartTimer) {
   if (whereClicked=="top-line" || whereClicked=="bottom-line") {
    scrollLineClickedY=myClientY-scrollButtonUpHeight;
    if (whereClicked=="bottom-line")
     scrollbarTimer=setInterval("turningOffBottomScrollbarTimer("+pixelsToScroll+"); ",100);
    else
     scrollbarTimer=setInterval("turningOffTopScrollbarTimer("+pixelsToScroll+"); ",100);
   }
   else scrollbarTimer = setInterval("sclexScrollBy("+pixelsToScroll+");",100);
   document.body.onmouseup=function() {
    clearInterval(scrollbarTimer);
    scrollbarTimer=null;
    document.body.onmouseup=null;
   }
  }
 }

 function save() {
  var ptr=document.all[treeObj.idOfTree];
  level=0;
  var st="";
  var pt=fbw_body.firstChild;
  while (pt.nodeName=="DIV" && (pt.className=="annotation" || pt.className=="history")) {
   st+=pt.outerHTML;
   pt=pt.nextSibling;
  }
  //alert("ptr.outerHTML:"+ptr.outerHTML);
  returnValue=st+saveTreeRec(ptr.firstChild);
  window.close();
 }
  </script>
  <body scroll=no onload="preInit();" onkeydown="onKeyDown();" onresizeend="calculateAndPaintScrollbar(); return true;" onmousewheel="myonmousewheel();">
   <div id=scrolling_div>
    <div id=for_messages class=message></div>
    <div id=empty_div onmousedown="JSTreeObj.removeHighlight();" onclick="if (event.srcElement.nodeName=='A') return false" ondblclick="if (event.srcElement.nodeName=='A') return false"></div>
  </div>
  <div id=vscrollbar><img src="images/scrollarrowup.png" style="width:14px" onmousedown="clickOnScrollbar(scrollStepInPixels,true);" ondblclick="clickOnScrollbar(scrollStepInPixels,false);"><img src="images/ScrollLine.png" id=ScrollLineTop onmousedown="clickOnScrollbar(document.body.clientHeight,true,'top-line');" ondblclick="clickOnScrollbar(document.body.clientHeight,false,'top-line');" style="width:14px"><img src="images/ScrollRunnerTop.png" style="width:14px" onmousedown="initDragScrollbar();"><img src="images/ScrollRunnerCenter.png" style="width:14px;" id=ScrollRunnerCenter onmousedown="initDragScrollbar();"><img src="images/ScrollRunnerBottom.png" style="width:14px" onmousedown="initDragScrollbar();"><img src="images/ScrollLine.png"  id=ScrollLineBottom onmousedown="clickOnScrollbar(-document.body.clientHeight,true,'bottom-line');" ondblclick="clickOnScrollbar(-document.body.clientHeight,false,'bottom-line');" style="width:14px"><img src="images/scrollarrowdown.png" style="width:14px" onmousedown="clickOnScrollbar(-scrollStepInPixels,true);" ondblclick="clickOnScrollbar(-scrollStepInPixels,false);"></div>
 </body>
</html>